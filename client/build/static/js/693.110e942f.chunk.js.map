{"version":3,"file":"static/js/693.110e942f.chunk.js","mappings":"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","sources":["pages/dashboard/TransporterProfilePreview.js","utils/coordinates.js"],"sourcesContent":["import {\n  Box,\n  Card,\n  Container,\n  Divider,\n  Grid,\n  Stack,\n  Tooltip,\n  Typography,\n} from '@mui/material';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactMapGL, {\n  FullscreenControl,\n  GeolocateControl,\n  Layer,\n  Marker,\n  NavigationControl,\n  Source,\n} from 'react-map-gl';\nimport { IconButtonAnimate } from '../../components/animate';\nimport Iconify from '../../components/Iconify';\nimport Page from '../../components/Page';\nimport { MAPBOX_API } from '../../config';\nimport useAuth from '../../hooks/useAuth';\nimport { getTransporterNextDeparture } from '../../redux/slices/departure';\nimport { dispatch, useSelector } from '../../redux/store';\nimport TransporterDetails from '../../sections/transporters/TransporterDetails';\nimport { getCoordinates } from '../../utils/coordinates';\nimport { getRoute } from '../../utils/getRoutes';\nimport { lineStyle } from '../transporters/layers';\n\n// ----------------------------------------------------------------------\n\nexport default function TransporterProfilePreview() {\n  const { user } = useAuth();\n  const mapRef = useRef();\n  const [, setBounds] = useState([-180, -85, 180, 85]);\n  const [zoom, setZoom] = useState(0);\n  const [coordinates, setCoordinates] = useState({ latitude: 0, longitude: 0 });\n  const [transporterDetails, setTransporterDetails] = useState(false);\n  const [initialView, setInitialView] = useState({\n    latitude: 34.0084,\n    longitude: -6.8539,\n    zoom,\n  });\n\n  const [start, setStart] = useState(null);\n  const [end, setEnd] = useState(null);\n  const [waypoints, setWaypoints] = useState(null);\n  const [coords, setCoords] = useState([]);\n\n  const { departure } = useSelector((state) => state.departure);\n\n  useEffect(() => {\n    dispatch(getTransporterNextDeparture());\n  }, []);\n\n  useEffect(() => {\n    if (mapRef.current) {\n      setBounds(mapRef.current.getMap().getBounds().toArray().flat());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapRef?.current]);\n\n  useEffect(() => {\n    const updateCoordinates = async () => {\n      try {\n        const result = await getCoordinates(user?.address);\n        setCoordinates(result);\n      } catch (error) {\n        setCoordinates({ latitude: 0, longitude: 0 });\n      }\n    };\n\n    updateCoordinates();\n  }, [user?.address]);\n\n  useEffect(() => {\n    if (departure) {\n      setInitialView({\n        latitude: departure?.departureCoordinates[0],\n        longitude: departure?.departureCoordinates[1],\n        zoom: 9,\n      });\n    } else if (coordinates?.latitude && coordinates?.longitude) {\n      setInitialView({\n        latitude: coordinates.latitude,\n        longitude: coordinates.longitude,\n        zoom: 4,\n      });\n    }\n  }, [departure, coordinates]);\n\n  // const onSelectTransporter = useCallback(() => {\n  //   if (departure) {\n  //     mapRef.current?.flyTo({\n  //       center: [\n  //         departure?.departureCoordinates[1],\n  //         departure?.departureCoordinates[0],\n  //       ],\n  //       duration: 5000,\n  //     });\n  //     setZoom(4);\n  //   } else if (coordinates) {\n  //     mapRef.current?.flyTo({\n  //       center: [coordinates?.latitude, coordinates?.longitude],\n  //       duration: 5000,\n  //     });\n  //     setZoom(4);\n  //   }\n  // }, [departure, coordinates]);\n\n  const onLoad = useCallback(() => {\n    if (mapRef.current) {\n      const map = mapRef.current.getMap();\n\n      if (departure) {\n        map.flyTo({\n          center: [\n            departure.departureCoordinates[1],\n            departure.departureCoordinates[0],\n          ],\n          zoom: 9,\n          duration: 2000,\n        });\n      } else if (coordinates.latitude && coordinates.longitude) {\n        map.flyTo({\n          center: [coordinates.longitude, coordinates.latitude],\n          zoom: 4,\n          duration: 2000,\n        });\n      }\n    }\n  }, [departure, coordinates]);\n\n  useEffect(() => {\n    if (departure) {\n      const { departureCoordinates, destinationCoordinates, checkPoints } =\n        departure;\n      setStart([departureCoordinates[1], departureCoordinates[0]]);\n      setEnd([destinationCoordinates[1], destinationCoordinates[0]]);\n\n      if (checkPoints?.length > 0) {\n        const intermediatePoints = checkPoints\n          ?.map(\n            (point) =>\n              `${point.coordinates.longitude.toFixed(\n                4\n              )},${point.coordinates.latitude.toFixed(4)}`\n          )\n          .join(';');\n        if (intermediatePoints) {\n          setWaypoints(intermediatePoints);\n        }\n      } else {\n        setWaypoints(null);\n      }\n    } else {\n      setStart(null);\n      setEnd(null);\n      setCoords([]);\n    }\n  }, [departure]);\n\n  // useEffect(() => {\n  //   const points = transporters?.map((transporter) => ({\n  //     type: 'Feature',\n  //     properties: {\n  //       cluster: false,\n  //       transporter,\n  //     },\n  //     geometry: {\n  //       type: 'Point',\n  //       coordinates: [\n  //         parseFloat(transporter?.trajectory?.departureCoordinates[0]),\n  //         parseFloat(transporter?.trajectory?.departureCoordinates[1]),\n  //       ],\n  //     },\n  //   }));\n\n  //   setPoints(points);\n  // }, [transporters]);\n\n  useEffect(() => {\n    // Call getRoute only if both start and end coordinates are available\n    if (start && end) {\n      getRoute(start, end, waypoints)\n        .then((response) => {\n          setCoords(response);\n        })\n        .catch((error) => console.error(error));\n    } else {\n      // If start or end coordinates are missing, clear the route\n      setCoords([]);\n    }\n  }, [start, end, waypoints]);\n\n  // geojson\n  const geojson = {\n    type: 'FeatureCollection',\n    features: [\n      {\n        type: 'feature',\n        geometry: {\n          type: 'LineString',\n          coordinates: [...coords],\n        },\n      },\n    ],\n  };\n\n  // end point\n  const endPoint = end\n    ? {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [...end],\n            },\n          },\n        ],\n      }\n    : null;\n\n  // Route styles\n  const layerEndPoint = {\n    id: 'end',\n    type: 'circle',\n    source: {\n      type: 'geojson',\n      data: end,\n    },\n    paint: {\n      'circle-radius': 4,\n      'circle-color': '#f30',\n    },\n  };\n\n  return (\n    <Page title='Dashboard: Preview'>\n      <Container maxWidth={'xl'}>\n        <Grid container justifyContent={'center'} alignItems={'center'}>\n          <Grid item xs={10} md={12}>\n            <Card sx={{ position: 'relative' }}>\n              <Stack direction='column' mx={3} my={2}>\n                <Typography variant='h5' sx={{ fontWeight: 450, mb: 1 }}>\n                  Profile Preview\n                </Typography>\n                <Divider />\n              </Stack>\n              <Box\n                sx={{\n                  display: 'grid',\n\n                  columnGap: 2,\n                  rowGap: 3,\n                  height: 800,\n                  width: '100%',\n                  px: { md: 3, xs: 2 },\n                  pb: { md: 3, xs: 2 },\n                  gridTemplateColumns: {\n                    xs: 'repeat(1,1fr)',\n                  },\n                }}\n              >\n                <ReactMapGL\n                  initialViewState={initialView}\n                  mapboxAccessToken={MAPBOX_API}\n                  mapStyle='mapbox://styles/mapbox/streets-v11'\n                  ref={mapRef}\n                  onZoomEnd={(e) => setZoom(Math.round(e.viewState.zoom))}\n                  zoom={zoom}\n                  onLoad={onLoad}\n                >\n                  <Marker\n                    longitude={\n                      departure?.departureCoordinates[1] ||\n                      coordinates?.longitude\n                    }\n                    latitude={\n                      departure?.departureCoordinates[0] ||\n                      coordinates?.latitude\n                    }\n                  >\n                    <Tooltip title={`${user.fName} ${user.lName}`}>\n                      <IconButtonAnimate\n                        elevation={2}\n                        onClick={() => {\n                          setTransporterDetails(!transporterDetails);\n                          onLoad();\n                        }}\n                      >\n                        <Iconify\n                          icon={'flowbite:map-pin-alt-solid'}\n                          width={25}\n                          height={25}\n                          sx={{ color: '#000000' }}\n                        />\n                      </IconButtonAnimate>\n                    </Tooltip>\n                  </Marker>\n                  <Source id='routeSource' type='geojson' data={geojson}>\n                    <Layer {...lineStyle} />\n                  </Source>\n                  {endPoint && (\n                    <Source id='endSource' type='geojson' data={endPoint}>\n                      <Layer {...layerEndPoint} />\n                    </Source>\n                  )}\n                  <GeolocateControl />\n                  <FullscreenControl />\n                  <NavigationControl position='top-right' />\n                </ReactMapGL>\n              </Box>\n              {transporterDetails && (\n                <Stack\n                  sx={{\n                    position: 'absolute',\n                    top: '10%',\n                    left: '4%',\n                    height: { md: '90vh', lg: '90', xl: '75vh' },\n                    width: { lg: 380, md: 350, xs: 350 },\n                  }}\n                >\n                  <TransporterDetails\n                    transporter={user}\n                    nextDeparture={departure}\n                  />\n                </Stack>\n              )}\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n    </Page>\n  );\n}\n","export async function getCoordinates(formattedAddress) {\n  try {\n    if (formattedAddress) {\n      const response = await fetch(\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${formattedAddress}.json?access_token=pk.eyJ1IjoiaWxpYXNzYW5hdGkiLCJhIjoiY2xuc3Rrb2hwMXlvejJrb2QxaG14ZXZzayJ9.BN3gUYZ3USajADQhJBvXQA`\n      );\n      if (response.ok) {\n        const data = await response.json();\n        if (data.features && data.features.length > 0) {\n          const [longitude, latitude] = data.features[0].center;\n\n          return { latitude, longitude };\n        }\n      }\n    }\n    throw new Error('Geocoding failed');\n  } catch (error) {\n    console.error('Error in geocoding:', error);\n    return { latitude: 0, longitude: 0 };\n  }\n}\n"],"names":["TransporterProfilePreview","user","useAuth","mapRef","useRef","setBounds","useState","zoom","setZoom","coordinates","setCoordinates","latitude","longitude","transporterDetails","setTransporterDetails","initialView","setInitialView","start","setStart","end","setEnd","waypoints","setWaypoints","coords","setCoords","departure","useSelector","state","useEffect","dispatch","getTransporterNextDeparture","current","getMap","getBounds","toArray","flat","async","result","getCoordinates","address","error","updateCoordinates","departureCoordinates","onLoad","useCallback","map","flyTo","center","duration","destinationCoordinates","checkPoints","length","intermediatePoints","point","concat","toFixed","join","getRoute","then","response","catch","console","geojson","type","features","geometry","endPoint","layerEndPoint","id","source","data","paint","_jsx","Page","title","children","Container","maxWidth","Grid","container","justifyContent","alignItems","item","xs","md","_jsxs","Card","sx","position","Stack","direction","mx","my","Typography","variant","fontWeight","mb","Divider","Box","display","columnGap","rowGap","height","width","px","pb","gridTemplateColumns","ReactMapGL","initialViewState","mapboxAccessToken","MAPBOX_API","mapStyle","ref","onZoomEnd","e","Math","round","viewState","Marker","Tooltip","fName","lName","IconButtonAnimate","elevation","onClick","Iconify","icon","color","Source","Layer","_objectSpread","lineStyle","GeolocateControl","FullscreenControl","NavigationControl","top","left","lg","xl","TransporterDetails","transporter","nextDeparture","formattedAddress","fetch","ok","json","Error"],"sourceRoot":""}